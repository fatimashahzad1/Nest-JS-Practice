// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String    @default("")
  address        String    @default("")
  phoneNumber    String    @default("")
  country        String    @default("")
  bankNo         String    @default("")
  isAdmin        Boolean   @default(false)
  name           String
  posts          Post[]
  acceptTerms    Boolean   @default(false)
  isVerified     Boolean?  @default(false)
  articles       Article[]
  followers      Follow[]  @relation("UserFollowers")
  following      Follow[]  @relation("UserFollowing")
  chats          Chat[]    @relation("UserChats")
  Message        Message[]
  initiatorCalls Call[]    @relation("initiator")
  receivedCalls  Call[]    @relation("received")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Prevent duplicate followsP
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  type      PostType @default(FEED)
  postImage String?
  createdAt DateTime @default(now())
}

enum PostType {
  EVENT
  FEED
}

model Article {
  id            Int     @id @default(autoincrement())
  title         String
  description   String?
  estimatedTime String
  creator       User?   @relation(fields: [creatorId], references: [id])
  creatorId     Int?
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]    @relation("UserChats")
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  content   String
  createdAt DateTime @default(now())
  senderId  Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Call {
  id          Int        @id @default(autoincrement())
  initiatorId Int
  receiverId  Int
  status      CallStatus
  createdAt   DateTime   @default(now())
  initiator   User       @relation("initiator", fields: [initiatorId], references: [id])
  receiver    User       @relation("received", fields: [receiverId], references: [id])
}

enum CallStatus {
  RECEIVED
  REJECTED
  MISSED
}
